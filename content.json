{"meta":{"title":"我在干什么","subtitle":"个人网站","description":"我的个人小站","author":"skinyi","url":"http://skinyi.github.com/skinyi.github.io","root":"/skinyi.github.io/"},"pages":[{"title":"关于","date":"2022-02-22T12:55:00.000Z","updated":"2022-02-23T14:16:26.068Z","comments":true,"path":"about/index.html","permalink":"http://skinyi.github.com/skinyi.github.io/about/index.html","excerpt":"","text":"关于我 联系我 邮箱：averyma@foxmail.com 微信：vxAveryMA"},{"title":"categories","date":"2022-02-23T06:19:06.228Z","updated":"2022-02-23T06:19:06.228Z","comments":false,"path":"categories/index.html","permalink":"http://skinyi.github.com/skinyi.github.io/categories/index.html","excerpt":"","text":""},{"title":"repositories","date":"2022-02-23T06:19:12.138Z","updated":"2022-02-23T06:19:12.138Z","comments":false,"path":"repository/index.html","permalink":"http://skinyi.github.com/skinyi.github.io/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-02-23T06:19:18.235Z","updated":"2022-02-23T06:19:18.235Z","comments":false,"path":"tags/index.html","permalink":"http://skinyi.github.com/skinyi.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用 Hexo 搭建个人博客","slug":"使用 Hexo 搭建个人博客","date":"2022-02-21T14:23:11.437Z","updated":"2022-02-23T15:08:09.331Z","comments":true,"path":"2022-02-21-使用 Hexo 搭建个人博客.html","link":"","permalink":"http://skinyi.github.com/skinyi.github.io/2022-02-21-%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html","excerpt":"","text":"一直以来都有搭建个人网站或者说博客的想法，今天终于把这件事做成了，感谢 Github 各大代码托管平台的 GitHub XXX Pages 服务，使我们即使没有公网服务器也能搭个人人可访问的静态个人网站，而且无需任何费用。当然国内码云也有这项服务，由于一些理由我没有在那上面弄， Github Pages 由于国内访问速度太慢了，我就在码云上面也创建了仓库。言归正传，按照 Hexo 社区的惯例以及正好作为自己对搭建个人网站过程的记录，我的个人网站上的第一篇文章就打算写写这个搭建博客的过程。 准备工作 搭建博客所需的环境和官网地址如下： 名称 作用 官网 Nodejs Hexo 博客框架依赖的开发环境 https://nodejs.org/en/ Git 推送博客至 github 或其他一些代码托管 https://git-scm.com/ Hexo 快速、简洁且高效的博客框架 https://hexo.io/zh-cn/ Purer theme 一款简洁高效的响应式个人博客主题 https://github.com/fengkx/hexo-theme-purer 博客系统平台环境搭建在我的 Fedora 35 虚拟机上。 12[skinyi@localhost ~]$ uname -aLinux localhost.localdomain 5.16.9-200.fc35.x86_64 #1 SMP PREEMPT Fri Feb 11 16:29:17 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 安装步骤 作者非常建议你按照我上面所给的表格来访问官方文档来分步进行部署。官方文档永远不会过时而且详尽，会最大程度上解决你的疑虑。以下是我对此次部署过程的一次记录，其中会着重记录我的部署过程中踩过的一些坑。 安装 Nodejs 使用Linux系统我个人比较倾向于从软件仓库获得软件，但是软件仓库里的软件不一定会是最新版的，但是这种方式可以使我们省去自己编译、配置的时间。Nodejs 官网上的下载页面里的 Linux 二进制版本是压缩包，要从软件仓库获得它的话需要点击下面的 Installing Node.js via package manager 链接来查阅官方文档。 根据文档的描述，Fedora 35 可以通过安装 dnf 软件模块的方式来进行安装，可以先看看仓库里已有的软件流版本： 1234567891011121314151617[skinyi@localhost ~]$ dnf module list nodejs上次元数据过期检查：0:08:01 前，执行于 2022年02月23日 星期三 18时50分04秒。Fedora Modular 35 - x86_64Name Stream Profiles Summary nodejs 12 default, development, minimal Javascript runtime nodejs 14 default, development, minimal Javascript runtime nodejs 15 default, development, minimal Javascript runtime nodejs 16 default, development, minimal Javascript runtime Fedora Modular 35 - x86_64 - UpdatesName Stream Profiles Summary nodejs 12 default, development, minimal Javascript runtime nodejs 14 common, development, minimal Javascript runtime nodejs 15 default, development, minimal Javascript runtime nodejs 16 [e] common, development, minimal Javascript runtime 提示：[d]默认，[e]已启用，[x]已禁用，[i]已安装 Hexo 官方文档中建议 Nodejs 版本使用 Nodejs 12.0 及以上版本的，在这里我选择安装 Nodejs 16 版本的。 1[skinyi@localhost ~]$ sudo dnf module install nodejs:16 安装完成后查看 Nodejs 版本号： 12[skinyi@localhost ~]$ node -vv16.14.0 从仓库安装完成后，需要升级 npm 版本以及为了不用以 root 权限执行 npm 命令，需要更改 npm 的配置： 1234# 在当前用户主目录创建 npm 全局安装目录[skinyi@localhost ~]$ mkdir ~/.npm-global# 配置 npm 使用刚才建的目录路径[skinyi@localhost ~]$ npm config set prefix &#x27;~/.npm-global&#x27; 添加 ~./npm-global/bin 路径到用户环境变量： 12[skinyi@localhost ~]$ echo &#x27;export PATH=~/.npm-global/bin:$PATH&#x27; &gt;&gt; ~/.bash_rc[skinyi@localhost ~]$ source ~/.bash_rc 安装Git 使用 dnf 包管理器安装 Git： 1[skinyi@localhost ~]$ sudo dnf install git-core git 全局配置，如果需要通过 git 将博客部署到 Github Pages 上，需要配置 git 的一些全局设置： 12[skinyi@localhost ~]$ git config --global user.name &quot;github 上的用户名&quot;[skinyi@localhost ~]$ git config --global user.email &quot;注册 github 账号使用的邮箱&quot; 安装 Hexo 以上依赖软件安装成功后，就可以进行 Hexo 的安装了： 1[skinyi@localhost ~]$ npm install -g hexo-cli 在工作目录里初始化自己的博客项目： 1234[skinyi@localhost ~]$ hexo init blog[skinyi@localhost ~]$ cd blog[skinyi@localhost ~]$ npm install[skinyi@localhost ~]$ hexo server 可以通过浏览器访问本地地址：http://127.0.0.1:4000 来预览生成的博客网站，若要在外部访问的话需要通过防火墙开放 4000 端口，在此不再赘述。 更换博客主题 从 Hexo 主题列表里筛选了一圈后我终于选中了此时用的这款主题，它的 Github 链接是：https://github.com/fengkx/hexo-theme-purer ，如果你也喜欢这款主题，可以通过项目主页的的说明文档来了解它的安装、配置及使用，不过建议你在看作者的文档前先大致看下 Hexo 的使用文档来了解了解 Hexo 的一些基本概念，这样看作者的文档再上手就比较容易了。 这款主题是基于 EJS 和 Tailwind CSS 构建的，以后若有兴趣构建自己的主题可以参考使用这两种技术。 下载主题文件 我没有按照官方使用 git clone 同步的方法来下载主题，直接通过下载仓库源码的方式下载下来。skinyi.github.io 是我的整个博客项目的主目录。 123[skinyi@localhost skinyi.github.io]$ wget -c https://github.com/fengkx/hexo-theme-purer/archive/refs/heads/master.zip -O themes/[skinyi@localhost skinyi.github.io]$ unzip themes/master.zip[skinyi@localhost skinyi.github.io]$ mv themes/hexo-theme-purer-master themes/purer 文档中为了避免由于主题更新而导致原有的主题目录下的 _config.yml 文件失效故而选择把主题的 _config.yml 放在主题外面并取名为 _config.theme.yml，在进行编译时将此文件的内容写进主题底下的 _config.yml。虽然我之后不会更新这个主题但是我还是按照文档里的做了，只不过我起的名字为 _config.purer.yml。 将 purer 主题下的 _config.example.yml 复制到项目主目录下。然后编辑 package.json 的内容如下： 12[skinyi@localhost skinyi.github.io]$ cp themes/purer/_config.example.yml _config.purer.yml[skinyi@localhost skinyi.github.io]$ code package.json package.json123456789&#123; &quot;scripts&quot;: &#123; &quot;theme&quot;: &quot;cat ./_config.purer.yml &gt; ./themes/purer/_config.yml &quot;, &quot;build&quot;: &quot;npm run theme &amp;&amp; hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;npm run theme &amp;&amp; hexo deploy&quot;, &quot;server&quot;: &quot;npm run theme &amp;&amp; hexo server&quot; &#125;,&#125; 配置主题 安装及配置插件 首先可选的工作是卸载不需要或不推荐的渲染器： 12[skinyi@localhost skinyi.github.io]$ npm uninstall hexo-renderer-stylus[skinyi@localhost skinyi.github.io]$ npm uninstall hexo-renderer-marked 安装 markdown-it 渲染器以及其他常用插件： 12345678# markdown-it 渲染器[skinyi@localhost skinyi.github.io]$ npm i -S hexo-renderer-markdown-it# 支持从post_assert_folder 用 markdown 引入图片[skinyi@localhost skinyi.github.io]$ npm i -S hexo-asset-image# 支持 emoji[skinyi@localhost skinyi.github.io]$ npm i -S markdown-it-emoji# 支持数学公式[skinyi@localhost skinyi.github.io]$ npm i -S @iktakahiro/markdown-it-katex 由于 hexo-renderer-markdown-it 默认不生成 h1 的锚点，所以我们需要在站点配置文件添加如下设置，在插件对象里将刚才添加的两个插件加进去: _config.yml123456789101112131415markdown: html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ anchors: level: 1 permalink: false separator: &#x27;-&#x27; plugins: - &#x27;@iktakahiro/markdown-it-katex&#x27; - markdown-it-emoji 创建常见页面 在 项目主目录/source 下按需添加 categories、tags、repositories、links、about 目录，这些分别对应博客框架中的分类页、标签页、仓库页（主题独有）、友链页、关于页。然后在其中创建对应的 index.md 文件。 我的项目没有要友链页，故最终目录结构如下： 12345678910111213141516171819[skinyi@localhost skinyi.github.io]$ tree -L 2 sourcesource├── about│ └── index.md├── categories│ └── index.md├── images│ ├── avatar.jpg│ └── favicon.png├── _posts│ ├── 使用 Hexo 搭建个人博客.md│ └── images├── README.md├── repository│ └── index.md└── tags └── index.md7 directories, 8 files 如果你事先看过 Hexo 的文档，你就会知道 _post 目录存放的是写好的文章以及我们刚刚创建的 index.md 需要添加 front-matter。以内容稍微多的 about 目录的 front-matter 为例： 1234567---title: 关于description: 个人简介layout: aboutsidebar: customdate: 2022-02-22 20:55:00--- 其他","categories":[{"name":"学习","slug":"学习","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"杂项","slug":"学习/杂项","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%82%E9%A1%B9/"},{"name":"日常记录","slug":"日常记录","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Javascript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Nodejs/"},{"name":"Hexo","slug":"Hexo","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Markdown/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"杂项","slug":"学习/杂项","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%82%E9%A1%B9/"},{"name":"日常记录","slug":"日常记录","permalink":"http://skinyi.github.com/skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Javascript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Nodejs/"},{"name":"Hexo","slug":"Hexo","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"http://skinyi.github.com/skinyi.github.io/tags/Markdown/"}]}