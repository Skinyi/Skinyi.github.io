{"meta":{"title":"Avery Ma 的个人网站","subtitle":"这是什么？","description":"个人网站、博客","author":"skinyi","url":"https://skinyi.github.io","root":"/"},"pages":[{"title":"关于","date":"2022-02-22T12:55:00.000Z","updated":"2022-02-24T13:30:42.633Z","comments":true,"path":"about/index.html","permalink":"https://skinyi.github.io/about/index.html","excerpt":"","text":"关于我 联系我 邮箱：averyma@foxmail.com"},{"title":"categories","date":"2022-02-23T06:19:06.228Z","updated":"2022-02-23T06:19:06.228Z","comments":false,"path":"categories/index.html","permalink":"https://skinyi.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-02-23T06:19:18.235Z","updated":"2022-02-23T06:19:18.235Z","comments":false,"path":"tags/index.html","permalink":"https://skinyi.github.io/tags/index.html","excerpt":"","text":""},{"title":"repositories","date":"2022-02-23T06:19:12.138Z","updated":"2022-02-23T06:19:12.138Z","comments":false,"path":"repository/index.html","permalink":"https://skinyi.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker 虚拟化技术的本质基底层技术","slug":"Docker | Docker 虚拟化技术的本质及底层技术","date":"2022-03-21T05:27:20.144Z","updated":"2022-03-21T08:33:54.380Z","comments":true,"path":"2022-03-21-Docker | Docker 虚拟化技术的本质及底层技术.html","link":"","permalink":"https://skinyi.github.io/2022-03-21-Docker%20|%20Docker%20%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF%E7%9A%84%E6%9C%AC%E8%B4%A8%E5%8F%8A%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF.html","excerpt":"","text":"容器的本质 容器本身是一种进程隔离技术。容器为进程提供了一个隔离的环境，容器内的进程无法访问容器外的进程。以运行一个 ubuntu 容器为例： 12[root@localhost ~]\\# docker run -it ubunturoot@d304e6f37918:\\# top # 执行 top 命令 在主机上查看系统进程： 1234567[root@localhost ~]\\# ps -ef# ......root 3630 3629 0 13:48 pts/0 00:00:00 docker run -it ubunturoot 3648 1 0 13:48 ? 00:00:00 /usr/bin/containerd-shim-runc-v2 -namespace moby -id d304e6f3791808ca34c8f8361da22root 3674 3648 0 13:48 pts/0 00:00:00 bashroot 3775 3674 0 13:49 pts/0 00:00:00 top# ...... 其中第一条记录是启动该容器时的命令，其父进程是执行该命令的 bash 进程；第二条记录是该容器的进程，其父进程是 systemd 进程，由 systemd 进程直接执行 containerd-shim-runc-v2 命令启动容器的进程；第三条记录表明该容器的进程自动启动一个 bash 进程用以接受用户的指令；第四条记录表明在该 bash 进程中执行了 top 命令。 进程隔离 以上示例印证了容器的本质是一个进程，容器中的进程是容器进程的子进程或子子进程。但如何表明该容器进程是与其他进程隔离的呢？在上述 Ubuntu 容器中执行 ps -ef 命令： 1234root@baf49ec287bb:\\# ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 06:15 pts/0 00:00:00 bashroot 9 1 0 06:15 pts/0 00:00:00 ps -ef 可以看到该容器的 bash 进程的 PID 竟然是 1 而不是和主机一样是 systemd 进程，而在主机上其进程号是 3674，由此可以视作该容器进程里的子进程认为自己运行在一个“与世隔绝”的操作系统世界里。 文件系统隔离 在该容器内部执行： 123456789101112131415161718root@baf49ec287bb:\\# ls -l /devtotal 0crw--w----. 1 root tty 136, 0 Mar 21 06:42 consolelrwxrwxrwx. 1 root root 11 Mar 21 06:15 core -&gt; /proc/kcorelrwxrwxrwx. 1 root root 13 Mar 21 06:15 fd -&gt; /proc/self/fdcrw-rw-rw-. 1 root root 1, 7 Mar 21 06:15 fulldrwxrwxrwt. 2 root root 40 Mar 21 06:15 mqueuecrw-rw-rw-. 1 root root 1, 3 Mar 21 06:15 nulllrwxrwxrwx. 1 root root 8 Mar 21 06:15 ptmx -&gt; pts/ptmxdrwxr-xr-x. 2 root root 0 Mar 21 06:15 ptscrw-rw-rw-. 1 root root 1, 8 Mar 21 06:15 randomdrwxrwxrwt. 2 root root 40 Mar 21 06:15 shmlrwxrwxrwx. 1 root root 15 Mar 21 06:15 stderr -&gt; /proc/self/fd/2lrwxrwxrwx. 1 root root 15 Mar 21 06:15 stdin -&gt; /proc/self/fd/0lrwxrwxrwx. 1 root root 15 Mar 21 06:15 stdout -&gt; /proc/self/fd/1crw-rw-rw-. 1 root root 5, 0 Mar 21 06:15 ttycrw-rw-rw-. 1 root root 1, 9 Mar 21 06:15 urandomcrw-rw-rw-. 1 root root 1, 5 Mar 21 06:15 zero 可以发现该容器的设备文件中没有主机中的硬盘 block 文件，这是由于该容器的文件系统也是和主机不一样的独立文件系统。那么容器的文件系统在哪儿呢？使用 docker inspect 容器名|容器ID 命令并查看输出的 GraphDriver 字段来找到容器的文件系统文件在主机中的位置。 123456789[skinyi@localhost ~]\\$ sudo docker inspect -f &#x27;&#123;&#123;json .GraphDriver&#125;&#125;&#x27; ubuntu | jq&#123; &quot;Data&quot;: &#123; &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/7472d22959e652e97acb49e6de5dd704bd2fb46de0f35d12a7b0cfbba1655cb5/merged&quot;, &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/7472d22959e652e97acb49e6de5dd704bd2fb46de0f35d12a7b0cfbba1655cb5/diff&quot;, &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/7472d22959e652e97acb49e6de5dd704bd2fb46de0f35d12a7b0cfbba1655cb5/work&quot; &#125;, &quot;Name&quot;: &quot;overlay2&quot;&#125; 该容器的文件系统位置就在主机上 UpperDir 属性所指向的位置。主机另起终端在该目录下找到容器的 dev 目录，并 ls -l 会发现该目录是空的，其实这是正常的，因为容器中该目录是内存数据中的一部分而未持久化到主机硬盘中。 文件隔离的本质技术是使用 chroot 系统调用，该系统调用用于将一个进程及其子进程的根目录改变到文件系统中的一个新位置，并让这些进程只能访问到该目录，此功能的初衷是为每个进程提供独立的磁盘空间。 我们可以模拟创建容器所进行的操作： 123456[root@localhost ~]\\# cd /var/lib/docker/overlay2/7472d22959e652e97acb49e6de5dd704bd2fb46de0f35d12a7b0cfbba1655cb5/[root@localhost 7472d22959e652e97acb49e6de5dd704bd2fb46de0f35d12a7b0cfbba1655cb5]\\# chroot diffroot@localhost:\\# ls bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr varroot@localhost:\\# pwd/ 此时无法执行 ps -ef 命令，因为其内存文件系统还没有挂载。可以到此为止了。 Linux 命名空间技术 后面的容器技术的实现基本上都离不开 Linux 的 Namespace 技术，该技术是 Linux 提供的内核级环境隔离的方法，它提供了以下的系统隔离能力： Mount Namespace 提供磁盘挂载点和文件系统的隔离能力 IPC Namespace 提供进程间通信隔离的能力 Network Namespace 提供网络隔离能力 UTS Namespace 提供主机名隔离能力 PID Namespace 提供进程隔离能力 User Namespace 提供用户隔离能力 在主机上查看容器的 bash 进程、主机的 bash 进程以及主机 systemd 进程的命名空间： 123456789101112131415161718192021222324252627282930313233343536[root@localhost ~]\\# ls -l /proc/3674/ns总用量 0lrwxrwxrwx. 1 root root 0 3月 21 15:42 cgroup -&gt; &#x27;cgroup:[4026532847]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 ipc -&gt; &#x27;ipc:[4026532777]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 mnt -&gt; &#x27;mnt:[4026532775]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:41 net -&gt; &#x27;net:[4026532780]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 pid -&gt; &#x27;pid:[4026532778]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 pid_for_children -&gt; &#x27;pid:[4026532778]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 time -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 time_for_children -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 user -&gt; &#x27;user:[4026531837]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 uts -&gt; &#x27;uts:[4026532776]&#x27;[root@localhost ~]\\# ls -l /proc/self/ns总用量 0lrwxrwxrwx. 1 root root 0 3月 21 15:42 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 ipc -&gt; &#x27;ipc:[4026531839]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 mnt -&gt; &#x27;mnt:[4026531840]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 net -&gt; &#x27;net:[4026532000]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 pid -&gt; &#x27;pid:[4026531836]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 time -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 time_for_children -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 user -&gt; &#x27;user:[4026531837]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:42 uts -&gt; &#x27;uts:[4026531838]&#x27;[root@localhost ~]\\# ls -l /proc/1/ns总用量 0lrwxrwxrwx. 1 root root 0 3月 21 13:05 cgroup -&gt; &#x27;cgroup:[4026531835]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 ipc -&gt; &#x27;ipc:[4026531839]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 mnt -&gt; &#x27;mnt:[4026531840]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 net -&gt; &#x27;net:[4026532000]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 pid -&gt; &#x27;pid:[4026531836]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:50 pid_for_children -&gt; &#x27;pid:[4026531836]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 time -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 15:50 time_for_children -&gt; &#x27;time:[4026531834]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 user -&gt; &#x27;user:[4026531837]&#x27;lrwxrwxrwx. 1 root root 0 3月 21 13:42 uts -&gt; &#x27;uts:[4026531838]&#x27; 可以发现主机的 bash 进程和 systemd 进程完全一致，但容器中的进程和主机进程中的存在部分差别。 CGroup 控制组 CGroup 是 Linux 内核提供的一种可以限制、记录、隔离进程组所使用的计算资源（CPU、内存、I/O 等）的机制。CGroup 提供了以下功能： 限制进程组可以使用的资源数量 进程组的优先级控制 记录进程组使用的资源数量 进程组隔离 进程组控制 容器技术使用 CGroup 技术限制容器对主机资源的使用。 Containerd 容器运行时 Containerd 是一个强大的工业级容器运行时环境，其脱胎于 docker 的 libcontainerd 后经开源独立以及不断完善从 RunC 发展到现在的 Containerd（谷歌及其他大厂的一系列操作下）。现在谷歌的 K8S 默认集成的容器运行时环境已经是 Containerd，而不是原本的 Docker，Docker 现在更多代表的其实是操纵 Containerd 的一个客户端。 !Containerd 的云原生架构","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Docker","slug":"学习/Docker","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Docker/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://skinyi.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"容器","slug":"容器","permalink":"https://skinyi.github.io/tags/%E5%AE%B9%E5%99%A8/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://skinyi.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"}]},{"title":"云计算与阿里云 ACP 概述","slug":"云计算 | 云计算与阿里云 ACP 概述","date":"2022-03-13T02:02:31.486Z","updated":"2022-03-14T13:17:58.484Z","comments":true,"path":"2022-03-13-云计算 | 云计算与阿里云 ACP 概述.html","link":"","permalink":"https://skinyi.github.io/2022-03-13-%E4%BA%91%E8%AE%A1%E7%AE%97%20|%20%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%8E%E9%98%BF%E9%87%8C%E4%BA%91%20ACP%20%E6%A6%82%E8%BF%B0.html","excerpt":"","text":"云计算与虚拟化概述 云计算 云计算是一种模型，它可以实现随时随地、便捷地、随需应变地从可配置计算资源共享池中获取所需的资源（例如，网络、服务器、存储、应用及服务），资源能够快速供应并释放，使管理资源的工作量和与服务提供商的交互减小到最低限度。 云计算五大特征： On-Demand Self-Service 按需自助服务 Rapid Elasticity 快速弹性伸缩 Resource Pooling 资源化池 Measured Service 可计量服务 Broad Network Access 广泛网络接入 云计算的四大部署模式： Private Cloud: 私有云 Public Cloud: 公有云（阿里云 ECS） Community Cloud: 社区云（医药行业云、运输行业云、金融行业云） Hybrid Cloud: 混合云（采用两种或两种以上上述部署模式部署） 云计算的核心技术是虚拟化技术，虚拟化其实主要提供了 Iaas 模式的服务，云计算的其他服务模式都是在 IaaS 的基础上发展而来的。 云计算的三种服务模式： IaaS(Infrastructure as a Service) 基础设施即服务: 出租处理能力、存储空间、网络带宽等基本计算资源，如：亚马逊 EC2、弹性云服务器 PaaS(Platform as a Service) 平台即服务：为客户开发的应用程序提供可部署的云服务，如：Microsoft Azure、数据库服务 SaaS(Software as a Service) 软件即服务：在网络上提供可直接使用的应用程序，如：Office 365、各种云 APP 云计算的八个通用特点：大规模、弹性计算、标准化、地理分布、虚拟化、面向服务、低成本、高安全性。 云计算的发展历程： 云计算 1.0 计算虚拟化 云计算 2.0 软件定义与整合 云计算 3.0 云原生与重构业务 虚拟化 虚拟化是指一种将硬件转变（抽象）为软件的技术。虚拟化是资源的逻辑表示，其不受物理限制的约束。虚拟化创建了一层隔离层，把硬件和上层应用分离开来，允许在一个硬件资源上运行多个逻辑应用。 常见的虚拟化：服务器虚拟化、网络虚拟化、存储虚拟化、桌面虚拟化等。其中服务器虚拟化的结构自下而上分别是：宿主机、宿主机操作系统、Hypervisor、客户机、客户机操作系统。 Hypervisor：虚拟机技术的核心、虚拟化层的具体实现。 创造并运行虚拟机的软件、固件或者硬件； 以软件的方式，实现一套和物理主机环境完全一样的虚拟环境，物理主机有的所有资源，包括 CPU、内存、网络 IO、设备 IO 等都有； 相当于物理主机的资源进行划分和隔离，供上层使用（共享硬件）。 主流 Hypervisor 产品：VMware ESXi、Microsoft Hyper-V、Linux KVM、Red Hat Enterprise Virtualization(RHEV)、Citrix XenServer、Oracle VM、VMware Workstation、VMware Player、VMware Fusion. 根据在整个系统中的位置不同，虚拟化架构分为以下几种： 寄居虚拟化架构：寄居虚拟化架构指在宿主操作系统之上安装和运行虚拟化程序，依赖于宿主操作系统对设备的支持和物理资源的管理。（VMware） 裸金属虚拟化架构：裸金属虚拟化架构指直接在硬件上面安装虚拟化软件，再在其上安装操作系统和应用，依赖虚拟层内核和服务器控制台进行管理。（阿里云弹性裸金属服务器，ECS Bare Metal Instance） 操作系统虚拟化架构：操作系统虚拟化架构在操作系统层面增加虚拟服务器功能。操作系统虚拟化架构把单个的操作系统划分为多个容器，使用容器管理器来进行管理。宿主操作系统负责在多个虚拟服务器（即容器）之间分配硬件资源，并且让这些服务器彼此独立。（docker） 混合虚拟化架构将一个内核级驱动器插入到宿主操作系统内核。这个驱动器作为虚拟硬件管理器来协调虚拟机和宿主操作系统之间的硬件访问。（KVM） 服务器虚拟化技术的分类： 按照虚拟对象来分可分为：CPU 虚拟化、内存虚拟化、I/O 虚拟化； 按照虚拟化程度分：全虚拟化、半虚拟化、硬件辅助虚拟化。 虚拟化的特点： 分区：在单一物理服务器上同时运行多个虚拟机 隔离：在单一物理服务器上的多个虚拟机之间相互隔离 封装：整个虚拟机执行环境封装在独立文件中，可以通过移动文件的方式来迁移该虚拟机 相对于硬件隔离：虚拟机无需修改，即可在任何服务器上运行 CPU 虚拟化 CPU 虚拟化分为 CPU 全虚拟化技术、CPU 半虚拟化技术以及 CPU 硬件辅助虚拟化技术。CPU的虚拟化技术可以单CPU模拟多CPU并行，允许一个平台同时运行多个操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。 CPU 全虚拟化 CPU 全虚拟化主要采用优先级压缩技术（Ring Compression）和 二进制代码翻译技术（Binary Translation）。优先级压缩技术让 VMM 和 Guest 运行在不同的特权级下。 对 X86 架构而言，即 VMM 运行在最高特权级别 Ring 0 下，Guest OS 运行在Ring 1 下，用户应用运行在 Ring 3 下。因此 Guest OS 的核心指令无法直接下达 到计算机系统硬件执行，而是需要经过 VMM 的捕获和模拟执行（部分难以虚拟化的指令需要通过 Binary Translation技术进行转换）。 CPU 半虚拟化 CPU 半虚拟化主要采用 Hypercall 技术。Guest OS 的部分代码被改变，从而使 Guest OS 会将和特权指令相关的操作都转换为发给 VMM 的 Hypercall（超级调用），由 VMM 继续进行处理。而Hypercall 支持的批处理和异步这两种优化方式，使得通过 Hypercall 能得到近似于物理机的速度。 CPU 硬件辅助虚拟化 CPU 硬件辅助虚拟化目前主要有 Intel 的 VT-x 和 AMD 的 AMD-V 这两种技术。其核心思想都是通过引入新的指令和运行模式，使 VMM 和 Guest OS 分别运行在不同模式（ROOT 模式和非 ROOT 模式）下，且 Guest OS 运行在 Ring 0 下。通常情况下，Guest OS 的核心指令可以直接下达到计算机系统硬件执行，而不需要经过 VMM。当 Guest OS 执行到特殊指令的时候，系统会切换到 VMM，让 VMM 来处理特殊指令。 内存虚拟化 内存虚拟化的产生源于 VMM 与客户系统在对物理内存的认识上存在冲突，造成物理内存真正拥有者—— VMM 必须对系统访问的内存进行一定程度上的虚拟化。 内存全虚拟化技术 通过使用影子页表（Shadow Page Table）实现虚拟化。 VMM 为每个Guest 都维护一个影子页表，影子页表维护虚拟地址（VA）到机器地址（MA）的映射关系。而 Guest 页表维护 VA 到客户机物理地址（GPA）的映射关系。 当 VMM 捕获到 Guest 页表的修改后，VMM 会查找负责 GPA 到 MA 映射的 P2M 页表或者哈希函数，找到与该 GPA 对应的 MA，再将 MA 填充到真正在硬件上起作用的影子页表，从而形成 VA 到 MA 的映射关系。而 Guest 的页表则无需变动。 内存半虚拟化技术 通过使用页表写入法实现虚拟化。 Guest OS 在创建一个新的页表时，会向 VMM 注册该页表。之后在 Guest 运行的时候，VMM 将不断的管理和维护这个表，使 Guest 上面的程序能直接访问到合适的地址。 内存硬件辅助虚拟化技术 通过扩展页表 EPT（extended page table）实现虚拟化。 EPT 通过使用硬件虚拟化技术，使其能在原有的页表的基础上，增加一个 EPT 页表，用于记录 GPA 到 MA 的映射关系。VMM 预先把 EPT 页表设置到 CPU 中。 Guest 修改 Guest 页表，无需 VMM 干预。地址转换时，CPU 自动查找两张页表完成 Guest 虚拟地址到机器地址的转换，从而降低整个内存虚拟化所需的开销。 阿里云及阿里云云计算认证 阿里云 ACP 认证是面向使用阿里云云计算产品的架构、开发、运维人员的专业技术认证，主要涉及阿里云的计算、存储、网络、安全类的核心产品。该认证在 2020 年 1 月 15 日之后在原有通过线下机考的要求之上新增了完成前置实验的要求，其线下机考题分单选（70 道）和多选（30 道）两种题型，每题 1 分，总分 100 分，考生需达到 80 分以上才算通过。 具体要求可参见官方考试大纲。 阿里云云计算相关概念 ECS 云服务器 ECS(Elastic Compute Service) 是一种简单高效、处理能力可弹性伸缩的计算服务。帮助您构建更稳定、安全的应用，提升运维效率，降低IT成本，使您更专注于核心业务创新。 SLB 负载均衡 负载均衡SLB（Server Load Balancer）是一种对流量进行按需分发的服务，通过将流量分发到不同的后端服务器来扩展应用系统的吞吐能力，并且可以消除系统中的单点故障，提升应用系统的可用性。阿里云负载均衡SLB分为两类：传统型负载均衡CLB和应用型负载均衡ALB。 Auto Scaling 弹性伸缩 弹性伸缩（Auto Scaling）是根据业务需求和策略自动调整计算能力（即实例数量）的服务。您可以指定实例的类型，即ECS实例或ECI实例。在业务需求增长时，弹性伸缩自动增加指定类型的实例，来保证计算能力；在业务需求下降时，弹性伸缩自动减少指定类型的实例，来节约成本。弹性伸缩不仅适合业务量不断波动的应用程序，同时也适合业务量稳定的应用程序。 OSS 对象存储 阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，可提供99.9999999999%（12个9）的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。 OSS具有与平台无关的RESTful API接口，您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。 您可以使用阿里云提供的API、SDK接口或者OSS迁移工具轻松地将海量数据移入或移出阿里云OSS。数据存储到阿里云OSS以后，您可以选择标准存储（Standard）作为移动应用、大型网站、图片分享或热点音视频的主要存储方式，也可以选择成本更低、存储期限更长的低频访问存储（Infrequent Access）、归档存储（Archive）、冷归档存储（Cold Archive）作为不经常访问数据的存储方式。 CDN 内容分发网络 阿里云内容分发网络CDN（Content Delivery Network）是建立并覆盖在承载网之上，由遍布全球的边缘节点服务器群组成的分布式网络。阿里云CDN能分担源站压力，避免网络拥塞，确保在不同区域、不同场景下加速网站内容的分发，提高资源访问速度。 VPC 专有网络 专有网络是您专有的云上私有网络。您可以完全掌控自己的专有网络，例如选择IP地址范围、配置路由表和网关等，您可以在自己定义的专有网络中使用阿里云资源，如云服务器、云数据库RDS和负载均衡等。 云盾和云监控 云盾和云监控是指阿里推出的针对云产品的安全防御以及监测系统。","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"ACP","slug":"学习/ACP","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/ACP/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"认证考试","slug":"认证考试","permalink":"https://skinyi.github.io/tags/%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95/"},{"name":"ACP","slug":"ACP","permalink":"https://skinyi.github.io/tags/ACP/"},{"name":"云计算","slug":"云计算","permalink":"https://skinyi.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"阿里云","slug":"阿里云","permalink":"https://skinyi.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"宇宙的尽头是考公之话说 vlookup 函数","slug":"Excel | 宇宙的尽头是考公之话说 vlookup 函数","date":"2022-03-05T12:51:48.680Z","updated":"2022-03-13T02:17:58.370Z","comments":true,"path":"2022-03-05-Excel | 宇宙的尽头是考公之话说 vlookup 函数.html","link":"","permalink":"https://skinyi.github.io/2022-03-05-Excel%20|%20%E5%AE%87%E5%AE%99%E7%9A%84%E5%B0%BD%E5%A4%B4%E6%98%AF%E8%80%83%E5%85%AC%E4%B9%8B%E8%AF%9D%E8%AF%B4%20vlookup%20%E5%87%BD%E6%95%B0.html","excerpt":"","text":"废话 这篇文章构思了很久了，奈何去外地出差加班今天才抽出晚上的时间来写，做私企的社畜确实没有公务员安逸。宁夏公务员招考公告刚发布，今日头条便推送过来了新闻，我也就关注了下。截至 3 月 2 日 10 点，宁夏报名人数达到了 73095 人，社会发展贫富差距拉大以及近年疫情影响下人们追求安稳饭碗的观念愈发深入人心了。生活安稳、工作体面的体制内人员在婚恋市场都有一定的优势，每当我妈手机里的快手直播间操着方言的媒婆说“这家女子想找个体制内的呢”，身在活多钱少的私企的我的寂寞的内心顿时哇凉哇凉的。于是我决定看看今年的报考人数打算打算，不行就争取个以后做我现在公司甲方爸爸的机会，想着我以后刁难我现在同事时的威风，嘴角不禁上扬了起来。 问题的提出 暗中观察到了 3 月 2 日，报名截止的最后一天，10 点出了最后一次的报考人数公示。统计了下最高缴费招考比的职位是 437:1 的民革银川市委员会一级科员，也不知道这个职位有什么吸引人的地方。我也根据我自身的想法，将职位过滤了一遍，最终筛出来的大致自身条件不受限可报的职位有 25 个，接下来就是要决定报哪个了，我想着根据缴费招考比选最低的那个竞争会小一些。要从 25 个职位中一一比对算缴费招考比并进行比较确实有点费劲，如果能计算机辅助的完成这个任务会更好些。 问题分析 我比对了这两张表，发现他们有两个共同的列：职位名称和职位代码。看到职位代码，作为技术人员的我想到了主键和 SQL。如果能在 Excel 中执行 SQL 查询，我上面的问题不难解决而且强大的 Excel 也确实内置了对 SQL 的支持，但其实像我现在的问题根本用不着这么复杂的方法，最好的方法是用 Excel 数据处理的函数大法。 以上问题的解决思路可以被分解为：1. 从表二根据表一筛选出来的职位代码（职位名称也行，但我还是习惯用可以标识唯一性的代码串）查出缴费人数和招考人数并记录在表一；2. 在表一计算缴费和招考人数的比例；3. 表一根据此比例进行排序；4. 从表一根据排序结果综合自身其他意愿选择报考职位。 以上解决方法中最难的其实是第一步，其他方法中涉及的计算和排序都十分简单。很多人都不太会用到 Excel 提供的一个强大的查找函数 vlookup 可以满足步骤一的需要。以下是这个函数的介绍： VLOOKUP(lookup_value,table_array,col_index_num,[range_lookup]) 按行查找表格或区域内容 其中各参数的意义是： lookup_value：要查找的值，也被称为查阅值（该参数既可以是单元格也可以是定值）。 table_array：查阅值所在的区域。 需注意：查阅值应该始终位于所在区域的第一列，这样 VLOOKUP 才能正常工作。 例如，如果查阅值位于单元格 C2 内，那么你的区域应该以 C 开头。 col_index_num：区域中包含返回值的列号。 例如，如果指定 B2：D11 作为区域，则应该将 B 计为第一列，将 C 作为第二列，以此类比。 range_lookup：（可选）如果需要返回值的近似匹配，可以指定 TRUE；如果需要返回值的精确匹配，则指定 FALSE。 如果没有指定任何内容，默认值将始终为 TRUE 或近似匹配。 解决步骤 了解这个函数之后就很简单了，为了方便，在表一所在的工作簿新建工作表，将表二的内容复制过去，如图： 在职位表新建列：缴费人数、缴费招考比。职位表的结构就变成了： ◢ A B C D E F G H I J K L M N O P 1 序号 招考单位 部门及职位 职位简介 职位代码 招考人数 专业要求 学历要求 学位要求 政治面貌 其他条件 备注 申论试卷类型 联系电话 缴费人数 缴费招考比 308 304 石嘴山市 石嘴山市市直部门一级科员（一） 负责综合管理服务、信息化建设、工程建设项目规划、项目审批等工作 017001 2 计算机类、电子信息类、建筑类、水利类 本科及以上 学士及以上 不限 限男性 合并职位：市人力资源和社会保障局1人、民政局1人、团市委（参照公务员法管理群团机关）1人、就业创业服务局（参照公务员法管理事业单位）1人 A卷 0952-2012332 0952-2218747 140 70 … … … … … … … … … … … … … … … … … 然后就可以用 vlookup 函数自动从统计表根据职位代码查找到对应职位的缴费人数。简单起见，可以用 Excel 的函数向导手动可视化的选择或确定出函数的参数，从菜单栏选中：公式-插入函数，在搜索函数对话框里输入 vlookup 并点击转到，然后确保从选择函数中选中 vlookup 后点击确定。 点击每项参数后面红圈里的按钮就可以在工作表中选择参数或参数范围： 最终完整函数形式是：=VLOOKUP(E308,统计表!D2:I765,6,0)，意思是从统计表的 D2 到 I765 的单元格范围内对比 D 列的值是否为 E308 里的值，若精确匹配则返回该单元格所选范围的第六行的值为该函数的结果。 观察之后发现对应正确，然后就可以用 Excel 强大的填充工具将其他职位的缴费人数也根据第一个筛选出来的岗位填充进去。在我的操作中，填充后的函数虽然有问题但工作良好，因为职位表和统计表的职位表的排序是对应的，此时若在未对应的情况下就会出现问题，有的单元格可能会出现 #N/A 值。 问题思考 造成上述问题的原因是我们未锁定 table_array 参数的所选范围的行值，每次往下下拉填充统计范围的行值都会自增，如我在下面随便选中的一个填充后的单元格的公式变成了：=VLOOKUP(E615,统计表!D486:I1249,6,0)，这在无序情况下会出错。 为了使该参数固定，可以借助 $ 符号进行限定，这样每次填充时该函数的第二个参数就是不变的了。 于是，筛选后的职位表的第一行的公式可以写成：=VLOOKUP(E308,统计表!D$2:I$765,6,0)，然后再往下填充。再选中刚才填充的公式，其变成了：=VLOOKUP(E615,统计表!D$2:I$765,6,0)，这样就比较精准了。 计算缴费招考比，以筛选后的职位表的第一行为例：=O308/F308。然后用排序工具排序就完成任务了。 还是废话 看了最后的结果，不仅感叹现在的公务员考试越来越卷，我估计我也将只会是陪考员中的一员。由此看来还是再钻研钻研 Excel 的 SQL 查询功能比较现实。","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Office","slug":"学习/Office","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Office/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"https://skinyi.github.io/tags/Excel/"},{"name":"Office","slug":"Office","permalink":"https://skinyi.github.io/tags/Office/"},{"name":"避免加班","slug":"避免加班","permalink":"https://skinyi.github.io/tags/%E9%81%BF%E5%85%8D%E5%8A%A0%E7%8F%AD/"},{"name":"少加班","slug":"少加班","permalink":"https://skinyi.github.io/tags/%E5%B0%91%E5%8A%A0%E7%8F%AD/"}]},{"title":"Docker Run 命令详解","slug":"Docker | Docker Run 命令详解","date":"2022-03-01T12:31:09.667Z","updated":"2022-03-13T02:19:58.290Z","comments":true,"path":"2022-03-01-Docker | Docker Run 命令详解.html","link":"","permalink":"https://skinyi.github.io/2022-03-01-Docker%20|%20Docker%20Run%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.html","excerpt":"","text":"Docker 在隔离的容器中运行进程。容器是在主机上运行的进程。主机可以是本地或远程的。当执行 docker run 时，运行的容器进程是独立的，因为它有自己的文件系统、自己的网络和自己的独立于主机的进程树。 以下介绍了如何在运行时使用 docker run 命令定义容器的资源。 docker run 命令的一般形式 基本的 docker run 命令采用以下形式： 1\\$ docker run [选项] IMAGE[:标签|@摘要] [命令] [参数...] docker run 命令必须指定从中生成容器的镜像。镜像开发人员可以定义与以下内容相关的镜像默认值： 分离或前台运行； 容器标识； 网络设置； 对CPU和内存的运行时约束。 通过 docker run [选项] 用户可以添加或覆盖开发人员设置的镜像默认值。此外，用户可以覆盖几乎所有由 Docker 运行时本身设置的默认值。也正因为如此，docker run 比任何其他 Docker 命令都有更多选项。 根据你的 Docker 系统配置，你可能需要在 docker run 命令前面加上 sudo 以确保命令正常执行生效。为了避免在 docker 命令中使用 sudo，你的系统管理员可以创建一个名为 docker 的 Unix 组并向其中添加 docker 操作用户。 仅用户可指定的选项 仅执行 docker run 命令的用户可指定以下命令执行时的选项： 独立进程或前台执行 独立进程（-d 选项） 前台执行 容器标识 名称（--name 选项） PID 值 IPC 设置（--ipc） 网络设置 重启策略（--restart） 清理（--rm） 运行时资源约束 运行时特权及 Linux capabilities 独立进程或前台执行 当启动了一个 Docker 容器，你必须先决定你是否想在后台以“分离”的模式或者默认在前台运行容器，可以使用 -d[=&lt;true|false&gt;] 选项来指定分离式模式，容器会在后台运行并打印出该容器的 id。 根据设计，当用于运行容器的根进程退出时，以分离模式启动的容器也会退出，除非你还指定了 -rm 选项。如果将 -d 与 -rm 一起使用，当容器退出或守护程序退出时(无论哪个先退出)，容器将被删除。 不要向分离模式运行的容器传递 service xxx start 的命令。如以下命令尝试创建容器后启动 nginx 服务。 1\\$ docker run -d -p 80:80 my_image service nginx start 即使这也会成功的启动容器内部的 nginx 服务，但是它不符合分离的容器范例，因为随着根进程（service nginx start）的退出，分离式容器也会跟着停止，从而导致 nginx 服务启动了却不能用。要启动一个进程如 nginx web 服务器应该按照下述方法： 1\\$ docker run -d -p 80:80 my_image nginx -g &#x27;daemon off;&#x27; 要使用分离的容器进行输入/输出则必须使用网络连接或共享卷，因为该容器不会监听运行 docker run 的命令行。 为了将分离出去的容器转至前台运行，可以使用 docker attach 命令。 前台运行 在前台模式下（默认模式当未指定 -d 选项），docker run 可以启动容器中的进程并且将当前终端附加到该进程的标准输入、输出以及标准错误流中。它甚至可以“假装”成为一个 TTY 会话（如大多数命令行可执行文件期望的那样）并且传递信号。以下这些选项都是可配置的： -a=[] ：附加到标准输入、标准输出和 / 或标准错误流 -t ：分配一个伪 TTY –sig-proxy=true：将所有收到的信号代理到进程(仅限非TTY模式) -i ：即使没有连接，也保持标准输入流打开 如果你没有指定 -a 选项，Docker 就会将进程的标准输入、错误流附加到当前终端中，你也可以通过 -a 选项指定哪个流进行附加，比如： 1\\$ docker run -a stdin -a stdout -i -t ubuntu /bin/bash 对于交互式进程（如命令行 shell），必须一起指定 -i 和 -t 选项来为容器进程分配一个 TTY，这两个选项常被简写为 -it。当客户端从管道中接收标准输入流时指定 -t 选项通常是被禁止的，比如： 1\\$ echo test | docker run -i busybox cat 注意：在容器中运行的 PID 为 1 的进程会被 Linux 特殊看待：它会忽略任何信号的默认行为。最终就会导致收到 SIGINT 和 SIGTERM 信号的进程不会终止除非它被编码进行指定。 容器标识 容器名称（–name） 用户可以通过三种方式来标识容器： 标识符类型 例子 UUID 长标识符 “f78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778” UUID 短标识符 “f78375b1c487” 名称 “evil_ptolemy” 其中，UUID 标识符由 Docker 守护程序生成。如果未通过 --name 选项来给容器赋予名称，则守护程序会生成一串随机字符来自动命名该容器。给容器进行有意义的命名是一个比较好的习惯。如果你制定了容器的名称，就可以在 Docker 网络中引用容器时使用它，不论是前台还是后台运行的容器。 默认网桥网络上的容器必须被链接以通过名称进行通信。 最后，为了便于自动化，你可以让 Docker 将容器的 ID 写入到你选择的文件中。这类似于一些程序会将自身进程 ID 写入到文件中去，正如你见过的 PID 文件。 1--cidfile=&quot;&quot;：将容器 ID 写入文件 镜像[:标签] 虽然严格来说这不是一种标识容器的方法，但是你可以通过将 image[:tag] 添加到命令中来指定您想要运行容器的镜像版本。比如：docker run ubuntu:14.04。 镜像[@摘要] 使用 v2 或更高版本镜像格式的镜像有一个称为摘要的内容可寻址标识符。只要用于生成镜像的输入不变，摘要值就是可预测和可参考的。 以下示例使用在运行 alpine 镜像时使用了 sha256:9cacb71397b640ECA97488cf08582AE4068513101088e9f96c9814bfda95e0 摘要： 1\\$ docker run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date PID 设置（–pid） –pid=“” ：为容器设置 PID（进程） 命名空间模式， ‘container:&lt;name|id&gt;’：加入其他容器的 PID 命名空间， ‘host’：使用容器中的主机的 PID 命名空间。 默认情况下，所有容器都启用了 PID 命名空间。 PID 命名空间提供了进程的分离。PID 命名空间删除了系统进程的视图，并允许重用进程 ID，包括 pid 1。 在某些情况下，你希望你的容器共享主机的进程名称空间，基本上允许容器内的进程看到系统上的所有进程。例如，您可以使用像 strace 或 gdb 这样的调试工具构建一个容器，但是在调试容器中的进程时，你希望使用这些工具。 例子：在容器中执行 `htop` 创建 Dockerfile: 123FROM alpine:latestRUN apk add --update htop &amp;&amp; rm -rf /var/cache/apk/*CMD [&quot;htop&quot;] 构建此 Dockerfile 并将镜像标记为 myhtop： 1\\$ docker build -t myhtop . 使用以下命令在容器中运行 htop 命令： 1\\$ docker run -it --rm --pid=host myhtop 加入其他可以被用来调试该容器的 pid 命名空间。 例子 开启一个运行 redis 服务的容器： 1\\$ docker run --name myredis -d redis 通过运行含有 strace 的其他容器来调试 redis 容器： 12\\$ docker run -it --pid=container:my-redis my_strace_docker_image bash\\$ strace -p 1","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Docker","slug":"学习/Docker","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Docker/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://skinyi.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"容器","slug":"容器","permalink":"https://skinyi.github.io/tags/%E5%AE%B9%E5%99%A8/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://skinyi.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"}]},{"title":"RHCE 考试及红帽企业 Linux 了解","slug":"Linux | RHCE 考试及红帽企业 Linux 了解","date":"2022-03-01T10:35:41.028Z","updated":"2022-03-05T12:58:15.221Z","comments":true,"path":"2022-03-01-Linux | RHCE 考试及红帽企业 Linux 了解.html","link":"","permalink":"https://skinyi.github.io/2022-03-01-Linux%20|%20RHCE%20%E8%80%83%E8%AF%95%E5%8F%8A%E7%BA%A2%E5%B8%BD%E4%BC%81%E4%B8%9A%20Linux%20%E4%BA%86%E8%A7%A3.html","excerpt":"","text":"🔴 此文章由之前的 Typora 笔记迁移过来，内容可能已经过时。 RHCE8.0 课程及考试代码 相较于 RHCE7 ，在 EX200 考试中，RHCE8 增加了 SHELL 脚本（RH254）、系统调优（RH442）以及 RHEL8 新特性的一些考察；在 EX294 考试中，RHCE7 考察一些常见的 Service 的搭建部署使用，如：NFS、SAMBA、DNS等，而在 RHCE8 考试中则主要考察 Ansible 自动化工具的操作，不再包含常见服务。 课程代码 考试代码 考试内容 考试形式 考试时长 RH124 EX200 以系统管理操作为主，如：文件系统、用户操作、权限操作、磁盘操作等 机考实验 2.5h RH134 RH294 EX294 全是关于 Ansible 自动化工具的技能操作 4h 搭建日常练习环境 🟢 所需前期准备工作： 已安装 VMWare Workstation 虚拟机，并在 bios 中开启了虚拟化相关的开关； 已下载好 RHEL8 Linux 操作系统 iso 镜像； 练习环境虚拟机以 NAT 模式和宿主机进行网络连接，使用的虚拟网卡是 VMNet8 。 虚拟机安装 RHEL8.3 操作系统 ​如图，虚拟机的配置如下，可根据自己个人硬件设备情况按需调整。 虚拟机软件选择如下： 设置 root 用户和普通用户后开始安装，等待进度条跑完重启虚拟机，重启后同意 Redhat 的 EULA，选择 FINISH CONFIGURATION 进入图形界面。图形界面默认为刚才创建的普通用户，新安装的 RHEL 还需要进行一些系统级的配置才行。 在此之前我们需要登陆 root 账户来配置我们新安装的操作系统。下图为使用 root 用户登陆后的界面。 安装完操作系统后的配置 配置网络设置 ​使用 ip addr show 命令来查看操作系统的网络配置结果如图所示： 🟢 其它网卡设备介绍： lo 虚拟网卡设备， lo 是主机用于向自身发送通信的一个特殊地址（也就是一个特殊的目的地址），其 ip 为 127.0.0.1 ； virbr0 是 KVM 默认创建的一个网桥，其作用是为连接其上的虚拟机网卡提供 NAT 访问外网的功能，可提供 DHCP 服务，其默认 ip 为 192.168.122.1。此虚拟设备被强制删除后重启系统还会再次创建，如需卸载须使用 KVM 虚拟化管理工具； birbr0-nic, 同上由 KVM 服务创建，可以使用 brctl 命令进行管理。 其中 ens160 才是连接外网所需要的网卡设备。可以看到此网卡没有绑定 ip 地址，但虚拟机软件是设置的 NAT 且已开启了 DHCP 服务，因此导致此问题的原因可能是我们的网卡设备没有启动或启用。需要检查此网卡设备的配置文件，其路径为：/etc/sysconfig/network-scripts/ifcfg-ens160（可以推断 RHEL 的网卡配置文件名称都是由 “ifcfg-” 和网卡名组成的），使用 vim 编辑器来编辑此文件，此文件内容如下： 123456789101112131415TYPE=Ethernet # 网络类型：以太网PROXY_METHOD=none # 网络代理方法BROWSER_ONLY=no BOOTPROTO=dhcp # 激活设备使用的地址配置协议：dhcp,static,none,bootpDEFROUTE=yes # ipv4 默认路由设备：yes,noIPV4_FAILURE_FATAL=noIPV6INIT=yes # 初始化 ipv6 协议栈：yes,noIPV6_AUTOCONF=yes # 自动配置 ipv6：yes,noIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens160 # 网卡名UUID=74e066fb-4f82-4422-ae3f-570dd2fca5a5 DEVICE=ens160 # 应用到的设备（和 HWADDR 必须留一个，后者指网卡物理地址）ONBOOT=no # 开机后自动激活此设备 🟢 Linux 网络配置说明： 网卡的相关配置文件：/etc/sysconfig/network-scripts/ifcfg-网卡名 路由相关的配置文件：/etc/sysconfig/network-scripts/route-网卡名 网络相关说明参考/usr/share/doc/initscripts-version/sysconfig.txt 需要将 ONBOOT=no 更改为 ONBOOT=yes 以使此网卡开机就激活启用，重启虚拟机，验证网卡是否已经自动激活（自动获得了 ip 地址则配置成功）。 使用 Xshell 远程登陆 ​在 Xshell 里新建连接，进行配置即可远程登陆到此虚拟机。 RHEL 和 CentOS 的区别 简称 中文全称 存在付费 付费回报 特点 RHEL 红帽企业 Linux 操作系统 是 获得技术支持 稳定，最先获得 Bug 修复 CentOS 社区企业操作系统 否 - 含有一些新特性，比较稳定，延迟获得 Bug 修复","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Linux","slug":"学习/Linux","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Linux/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"},{"name":"迁移文章","slug":"迁移文章","permalink":"https://skinyi.github.io/categories/%E8%BF%81%E7%A7%BB%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"RHEL","slug":"RHEL","permalink":"https://skinyi.github.io/tags/RHEL/"},{"name":"RHCE","slug":"RHCE","permalink":"https://skinyi.github.io/tags/RHCE/"},{"name":"认证考试","slug":"认证考试","permalink":"https://skinyi.github.io/tags/%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95/"}]},{"title":"Docker 命令手册及常用帮助命令","slug":"Docker | Docker 命令手册及常用帮助命令","date":"2022-02-27T14:03:20.637Z","updated":"2022-03-01T13:16:25.044Z","comments":true,"path":"2022-02-27-Docker | Docker 命令手册及常用帮助命令.html","link":"","permalink":"https://skinyi.github.io/2022-02-27-Docker%20|%20Docker%20%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4.html","excerpt":"","text":"常用命令速查表格 命令 用途 docker version 查看 docker 客户端及服务端（docker 引擎）的版本及环境信息 docker info 查看 docker 的系统信息，包括客户端、服务端配置、镜像与容器数量以及一些其他常见配置 docker [命令] --help 查看 docker [命令] 使用的帮助信息，比如 docker image --help Docker 命令速查手册地址：https://docs.docker.com/engine/reference/run/ 。 常用帮助命令介绍 docker version 查看 docker 版本信息 12345678910111213141516171819202122232425262728293031[skinyi@fedora ~]\\$ sudo docker version[sudo] skinyi 的密码：Client: Docker Engine - Community Version: 20.10.12 API version: 1.41 Go version: go1.16.12 Git commit: e91ed57 Built: Mon Dec 13 11:46:03 2021 OS/Arch: linux/amd64 Context: default Experimental: trueServer: Docker Engine - Community Engine: Version: 20.10.12 API version: 1.41 (minimum version 1.12) Go version: go1.16.12 Git commit: 459d0df Built: Mon Dec 13 11:43:48 2021 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.4.12 GitCommit: 7b11cfaabd73bb80907dd23182b9347b4245eb5d runc: Version: 1.0.2 GitCommit: v1.0.2-0-g52b36a2 docker-init: Version: 0.19.0 GitCommit: de40ad0 docker info 查看 docker 的系统信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[skinyi@fedora ~]\\$ sudo docker info[sudo] skinyi 的密码：Client: Context: default Debug Mode: false Plugins: app: Docker App (Docker Inc., v0.9.1-beta3) buildx: Docker Buildx (Docker Inc., v0.7.1-docker) scan: Docker Scan (Docker Inc., v0.12.0)Server: Containers: 2 Running: 0 Paused: 0 Stopped: 2 Images: 1 Server Version: 20.10.12 Storage Driver: overlay2 Backing Filesystem: xfs Supports d_type: true Native Overlay Diff: true userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 2 Plugins: Volume: local Network: bridge host ipvlan macvlan null overlay Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc io.containerd.runc.v2 io.containerd.runtime.v1.linux Default Runtime: runc Init Binary: docker-init containerd version: 7b11cfaabd73bb80907dd23182b9347b4245eb5d runc version: v1.0.2-0-g52b36a2 init version: de40ad0 Security Options: seccomp Profile: default cgroupns Kernel Version: 5.16.8-200.fc35.x86_64 Operating System: Fedora Linux 35 (Server Edition) OSType: linux Architecture: x86_64 CPUs: 2 Total Memory: 3.788GiB Name: fedora ID: I5R6:5NIE:OTIL:XBI4:R6WP:5XSO:BZTG:QGV6:6RHG:OU7U:P3EP:JTEC Docker Root Dir: /var/lib/docker Debug Mode: false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Live Restore Enabled: false docker [命令] --help 查看 docker [命令] 的帮助信息 123456789101112131415161718192021[skinyi@fedora ~]\\$ docker image --helpUsage: docker image COMMANDManage imagesCommands: build Build an image from a Dockerfile history Show the history of an image import Import the contents from a tarball to create a filesystem image inspect Display detailed information on one or more images load Load an image from a tar archive or STDIN ls List images prune Remove unused images pull Pull an image or a repository from a registry push Push an image or a repository to a registry rm Remove one or more images save Save one or more images to a tar archive (streamed to STDOUT by default) tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGERun &#x27;docker image COMMAND --help&#x27; for more information on a command. 123456789101112131415161718[skinyi@fedora ~]$ sudo docker container list --helpUsage: docker container ls [OPTIONS]List containersAliases: ls, ps, listOptions: -a, --all Show all containers (default shows just running) -f, --filter filter Filter output based on conditions provided --format string Pretty-print containers using a Go template -n, --last int Show n last created containers (includes all states) (default -1) -l, --latest Show the latest created container (includes all states) --no-trunc Don&#x27;t truncate output -q, --quiet Only display container IDs -s, --size Display total file sizes docker 子命令功能简介 子命令 描述 docker attach 将本地标准输入输出和错误流附加到正在运行的容器 docker build 从 Dockerfile 构建一个镜像 docker builder 管理镜像构建器 docker checkpoint 管理检查点 docker commit 从一个容器的所有更改创建一个新的镜像 docker config 管理 Docker 的配置 docker container 管理容器 docker context 管理 docker 上下文 docker cp 在容器和本地存储之间拷贝文件或目录 docker create 创建一个新的容器 docker diff 监视容器上的文件或目录的变化 docker events 从 docker 守护服务上获取实时事件 docker exec 在一个运行的容器上运行命令 docker export 将一个容器的文件系统以 tar 包的形式导出 docker history 展示一个镜像的提交历史 docker image 管理 docker 镜像 docker images 列出镜像 docker import 从 tar 包中导入内容来创建一个文件系统镜像 docker info 显示系统范围的信息 docker inspect 返回 docker 对象的底层信息 docker kill 杀掉一个或多个运行中的容器 docker load 从一个 tar 包或标准输入来加载镜像 docker login 登录 Docker registry docker logout 登出 Docker registry docker logs 获取一个容器的日志 docker manifest 管理 Docker 镜像清单和清单列表","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Docker","slug":"学习/Docker","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Docker/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://skinyi.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"容器","slug":"容器","permalink":"https://skinyi.github.io/tags/%E5%AE%B9%E5%99%A8/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://skinyi.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"}]},{"title":"Docker 介绍以及安装与卸载","slug":"Docker | Docker 介绍以及安装与卸载","date":"2022-02-27T13:03:47.405Z","updated":"2022-03-21T06:22:59.708Z","comments":true,"path":"2022-02-27-Docker | Docker 介绍以及安装与卸载.html","link":"","permalink":"https://skinyi.github.io/2022-02-27-Docker%20|%20Docker%20%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.html","excerpt":"","text":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的 Linux 或 Windows 操作系统的机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。 Docker 官方文档地址：https://docs.docker.com/。在其官网上关于 docker 的整体架构介绍可以找到这张图： 可以看出 docker 整体是模块化、低耦合且遵循 C/S 架构的，构成它的是功能不同的组件，以下是对这些组件的功能的梳理。 Docker 组件介绍 Docker Daemon：Docker 守护进程（dockerd）监听 Docker API 请求并管理 Docker 对象，例如镜像、容器、网络和存储卷。守护进程还可以与其他守护进程通信以管理 Docker 服务。 Docker Client：Docker 客户端（docker）是许多 Docker 用户与 Docker 交互的主要方式。当你使用 docker run 等命令时，客户端会将这些命令发送给 dockerd，dockerd 会执行这些命令。 docker 命令使用 Docker API。Docker 客户端可以与多个守护进程通信。 Docker Desktop：是一个易于安装的应用程序，适用于 Mac 或 Windows 环境，能够构建和共享容器化应用程序和微服务。Docker Desktop 包括 Docker 守护程序 (dockerd)、Docker 客户端 (docker)、Docker Compose、Docker Content Trust、Kubernetes 和 Credential Helper。有关更多信息，请参阅 Docker 桌面。 Docker Registries：Docker 仓库存储 Docker 映像（Docker Image）。DockerHub 是一个任何人都可以使用的公共仓库，并且 Docker 默认配置为在 DockerHub 上查找镜像。甚至可以定制运行自己的私有仓库。 当使用 docker pull 或 docker run 命令时，将从系统所配置的镜像仓库中提取所需的镜像。当使用 docker push 命令时，你定制的镜像会被推送到你配置的镜像仓库中。 Docker Objects：当使用 Docker 时，会涉及到创建和使用图像、容器、网络、卷、插件和其他对象。以下简要概述其中一些对象。 Docker Image Docker 镜像是一个只读模板，其中包含创建 Docker 容器时的说明。通常，一个镜像基于另一个镜像，并附带有一些额外的自定义。例如，可以构建一个基于 ubuntu 镜像的镜像，但会安装 Apache Web 服务器和一些你的应用程序，该镜像还包含使你的应用程序运行所需的配置的详细信息。 你可以创建自己的镜像，也可以只使用其他人创建并在仓库中发布的镜像。要构建你自己的镜像，你需要使用简单的语法创建一个 Dockerfile，用于定义创建和运行镜像所需的步骤。Dockerfile 中的每条指令都会在镜像中创建一个层。当你更改 Dockerfile 并重建映像时，仅重建那些已更改的层。与其他虚拟化技术相比，这是使镜像如此轻量、小巧和快速的部分原因。 Docker Container Docker 容器是镜像的可运行实例。你可以使用 Docker API 或 CLI 创建、启动、停止、移动或删除容器。你可以将容器连接到一个或多个网络，将存储附加到它，甚至可以根据其当前状态创建新的镜像。 默认情况下，一个容器与其他容器以及其宿主机的隔离相对较好。你可以控制容器的网络、存储和其他底层子系统与其他容器或宿主机的隔离程度。 一个容器由其镜像以及你在创建或启动它时提供给它的任何配置选项进行定义。当容器被移除时，任何未存储在持久存储中的状态更改都会消失。 ​Docker 三大核心组件指的是：Docker Image、Docker Container 以及 Docker Registry。 Docker 运行示例 以下命令运行 ubuntu 容器，以交互方式附加到本地命令行会话，并运行 /bin/bash。 1[skinyi@fedora ~]\\$ sudo docker run -i -t ubuntu /bin/bash ^ 安装 Docker 后如不做其他配置则 docker run 命令只能使用 root 权限来执行。 当你运行此命令时，会发生以下情况（假设你使用的是默认镜像仓库配置）： 如果你在本地没有 ubuntu 映像，Docker 会从你配置的镜像仓库（默认 DockerHub）中提取它，就像你手动运行 docker pull ubuntu 一样； Docker 使用该镜像创建一个新容器，就像你手动运行了 docker container create 命令一样； Docker 为该容器分配一个读写文件系统，作为该容器的底层，这允许正在运行的容器在其本地文件系统中创建或修改文件和目录； 由于没有指定任何其他的网络选项，Docker 会创建一个网络接口来将该容器连接到默认网络，包括为容器分配 IP 地址。默认情况下，容器可以使用主机的网络连接连接到外部网络。 Docker 启动容器并执行 /bin/bash。由于容器以交互方式运行并附加到您的终端（-i 和 -t 选项），所以你可以在将输出记录到终端时使用键盘提供输入。 当你键入 exit 命令以终止 /bin/bash 命令时，容器会停止但不会被删除，你可以重新启动或删除它。 Docker 的安装与卸载 个人学习使用操作系统为：Fedora 35，Fedora 版本目前仅支持 Fedora 34 和 Fedora 35。 12345678910111213141516171819202122[skinyi@fedora ~]\\$ cat /etc/os-releaseNAME=&quot;Fedora Linux&quot;VERSION=&quot;35 (Server Edition)&quot;ID=fedoraVERSION_ID=35VERSION_CODENAME=&quot;&quot;PLATFORM_ID=&quot;platform:f35&quot;PRETTY_NAME=&quot;Fedora Linux 35 (Server Edition)&quot;ANSI_COLOR=&quot;0;38;2;60;110;180&quot;LOGO=fedora-logo-iconCPE_NAME=&quot;cpe:/o:fedoraproject:fedora:35&quot;HOME_URL=&quot;https://fedoraproject.org/&quot;DOCUMENTATION_URL=&quot;https://docs.fedoraproject.org/en-US/fedora/f35/system-administrators-guide/&quot;SUPPORT_URL=&quot;https://ask.fedoraproject.org/&quot;BUG_REPORT_URL=&quot;https://bugzilla.redhat.com/&quot;REDHAT_BUGZILLA_PRODUCT=&quot;Fedora&quot;REDHAT_BUGZILLA_PRODUCT_VERSION=35REDHAT_SUPPORT_PRODUCT=&quot;Fedora&quot;REDHAT_SUPPORT_PRODUCT_VERSION=35PRIVACY_POLICY_URL=&quot;https://fedoraproject.org/wiki/Legal:PrivacyPolicy&quot;VARIANT=&quot;Server Edition&quot;VARIANT_ID=server Fedora 操作系统 Docker 安装文档：https://docs.docker.com/engine/install/fedora/。 卸载旧版本 12345678[skinyi@fedora ~]\\$ sudo dnf remove docker \\ docker-client \\ docker-client-lastest \\ docker-common \\ docker-lastest-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine 使用软件仓库进行 Doker 的安装 ​安装 dnf-plugins-core 插件。 1[skinyi@fedora ~]$ sudo dnf -y install dnf-plugins-core ​添加 docker 的官方软件仓库。 12[skinyi@fedora ~]$ sudo dnf config-manager --add-repo \\ https://download.docker.com/linux/fedora/docker-ce.repo 安装 Docker 引擎 1[skinyi@fedora ~]$ sudo dnf install docker-ce docker-ce-cli containerd.io 启动并验证 Docker 是否成功安装 1234567891011121314151617181920212223[skinyi@fedora ~]$ sudo systemctl start docker[skinyi@fedora ~]$ sudo docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/ 实现非 root 权限执行 docker 命令或者实现一些其他安装后的优化可以参阅：https://docs.docker.com/engine/install/linux-postinstall/。 卸载 Docker 引擎 12[skinyi@fedora ~]$ sudo dnf remove docker-ce docker-ce-cli containerd.io[skinyi@fedora ~]$ sudo rm -rf /var/lib/docker /var/lib/containerd 启动 Docker 时的执行过程 启动过程中的注意点： Docker 优先使用的存储驱动为 Overlay2； 加载容器时会设置容器的网络，并创建虚拟网络接口 docker0，该接口使用桥接模式接入网络，并在宿主机防火墙中配置一个 docker zone； Docker 的守护程序 dockerd 初始化成功后会启动 docker 应用容器引擎，然后 docker 引擎通过监听 /run/docker.sock 套接字实现客户端与守护程序之间的通信。","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Docker","slug":"学习/Docker","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Docker/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://skinyi.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"容器","slug":"容器","permalink":"https://skinyi.github.io/tags/%E5%AE%B9%E5%99%A8/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://skinyi.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"}]},{"title":"使用 Hexo 搭建个人博客","slug":"Hexo | 使用 Hexo 搭建个人博客","date":"2022-02-21T14:23:11.437Z","updated":"2022-03-01T12:23:53.488Z","comments":true,"path":"2022-02-21-Hexo | 使用 Hexo 搭建个人博客.html","link":"","permalink":"https://skinyi.github.io/2022-02-21-Hexo%20|%20%E4%BD%BF%E7%94%A8%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html","excerpt":"","text":"一直以来都有搭建个人网站或者说博客的想法，今天终于把这件事做成了，感谢 Github 各大代码托管平台的 GitHub XXX Pages 服务，使我们即使没有公网服务器也能搭个人人可访问的静态个人网站，而且无需任何费用。当然国内码云也有这项服务，由于一些理由我没有在那上面弄， Github Pages 由于国内访问速度太慢了，我就在码云上面也创建了仓库，然而启用 Pages 功能需要实名认证。言归正传，按照 Hexo 社区的惯例以及正好作为自己对搭建个人网站过程的记录，我的个人网站上的第一篇文章就打算写写这个搭建博客的过程。 准备工作 搭建博客所需的环境和官网地址如下： 名称 作用 官网 Nodejs Hexo 博客框架依赖的开发环境 https://nodejs.org/en/ Git 推送博客至 github 或其他一些代码托管 https://git-scm.com/ Hexo 快速、简洁且高效的博客框架 https://hexo.io/zh-cn/ Purer theme 一款简洁高效的响应式个人博客主题 https://github.com/fengkx/hexo-theme-purer 博客系统平台环境搭建在我的 Fedora 35 虚拟机上。 12[skinyi@localhost ~]$ uname -aLinux localhost.localdomain 5.16.9-200.fc35.x86_64 #1 SMP PREEMPT Fri Feb 11 16:29:17 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 安装步骤 我非常建议你按照我上面所给的表格来访问官方文档来分步进行部署。官方文档永远不会过时而且详尽，会最大程度上解决你的疑虑。以下是我对此次部署过程的一次记录，其中会着重记录我的部署过程中踩过的一些坑。 安装 Nodejs 使用 Linux 系统我个人比较倾向于从软件仓库获得软件，但是软件仓库里的软件不一定会是最新版的，但是这种方式可以使我们省去自己编译、配置的时间。Nodejs 官网上的下载页面里的 Linux 二进制版本是压缩包，要从软件仓库获得它的话需要点击下面的 Installing Node.js via package manager 链接来查阅官方文档。 根据文档的描述，Fedora 35 可以通过安装 dnf 软件模块的方式来进行安装，可以先看看仓库里已有的软件流版本： 1234567891011121314151617[skinyi@localhost ~]$ dnf module list nodejs上次元数据过期检查：0:08:01 前，执行于 2022年02月23日 星期三 18时50分04秒。Fedora Modular 35 - x86_64Name Stream Profiles Summary nodejs 12 default, development, minimal Javascript runtime nodejs 14 default, development, minimal Javascript runtime nodejs 15 default, development, minimal Javascript runtime nodejs 16 default, development, minimal Javascript runtime Fedora Modular 35 - x86_64 - UpdatesName Stream Profiles Summary nodejs 12 default, development, minimal Javascript runtime nodejs 14 common, development, minimal Javascript runtime nodejs 15 default, development, minimal Javascript runtime nodejs 16 [e] common, development, minimal Javascript runtime 提示：[d]默认，[e]已启用，[x]已禁用，[i]已安装 Hexo 官方文档中建议 Nodejs 版本使用 Nodejs 12.0 及以上版本的，在这里我选择安装 Nodejs 16 版本的。 1[skinyi@localhost ~]$ sudo dnf module install nodejs:16 安装完成后查看 Nodejs 版本号： 12[skinyi@localhost ~]$ node -vv16.14.0 从仓库安装完成后，需要升级 npm 版本以及为了不用以 root 权限执行 npm 命令，需要更改 npm 的配置： 1234# 在当前用户主目录创建 npm 全局安装目录[skinyi@localhost ~]$ mkdir ~/.npm-global# 配置 npm 使用刚才建的目录路径[skinyi@localhost ~]$ npm config set prefix &#x27;~/.npm-global&#x27; 添加 ~/.npm-global/bin 路径到用户环境变量： 12[skinyi@localhost ~]$ echo &#x27;export PATH=~/.npm-global/bin:$PATH&#x27; &gt;&gt; ~/.bash_rc[skinyi@localhost ~]$ source ~/.bash_rc 安装Git 使用 dnf 包管理器安装 Git： 1[skinyi@localhost ~]$ sudo dnf install git-core git 全局配置，如果需要通过 git 将博客部署到 Github Pages 上，需要配置 git 的一些全局设置： 12[skinyi@localhost ~]$ git config --global user.name &quot;github 上的用户名&quot;[skinyi@localhost ~]$ git config --global user.email &quot;注册 github 账号使用的邮箱&quot; 安装 Hexo 以上依赖软件安装成功后，就可以进行 Hexo 的安装了： 1[skinyi@localhost ~]$ npm install -g hexo-cli 在工作目录里初始化自己的博客项目： 1234[skinyi@localhost ~]$ hexo init blog[skinyi@localhost ~]$ cd blog[skinyi@localhost ~]$ npm install[skinyi@localhost ~]$ hexo server 可以通过浏览器访问本地地址：http://127.0.0.1:4000 来预览生成的博客网站，若要在外部访问的话需要通过防火墙开放 4000 端口，在此不再赘述。 更换博客主题 从 Hexo 主题列表里筛选了一圈后我终于选中了此时用的这款主题，它的 Github 链接是：https://github.com/fengkx/hexo-theme-purer ，如果你也喜欢这款主题，可以通过项目主页的的说明文档来了解它的安装、配置及使用，不过建议你在看作者的文档前先大致看下 Hexo 的使用文档来了解了解 Hexo 的一些基本概念，这样看作者的文档再上手就比较容易了。 这款主题是基于 EJS 和 Tailwind CSS 构建的，以后若有兴趣构建自己的主题可以参考使用这两种技术。 下载主题文件 我没有按照官方使用 git clone 同步的方法来下载主题，直接通过下载仓库源码的方式下载下来。gh-pages 是我的整个博客项目的主目录。 123[skinyi@localhost gh-pages]$ wget -c https://github.com/fengkx/hexo-theme-purer/archive/refs/heads/master.zip -O themes/[skinyi@localhost gh-pages]$ unzip themes/master.zip[skinyi@localhost gh-pages]$ mv themes/hexo-theme-purer-master themes/purer 文档中为了避免由于主题更新而导致原有的主题目录下的 _config.yml 文件失效故而选择把主题的 _config.yml 放在主题外面并取名为 _config.theme.yml，在进行编译时将此文件的内容写进主题底下的 _config.yml。虽然我之后不会更新这个主题但是我还是按照文档里的做了，只不过我起的名字为 _config.purer.yml。 将 purer 主题下的 _config.example.yml 复制到项目主目录下。然后编辑 package.json 的内容如下： 12[skinyi@localhost gh-pages]$ cp themes/purer/_config.example.yml _config.purer.yml[skinyi@localhost gh-pages]$ code package.json package.json123456789&#123; &quot;scripts&quot;: &#123; &quot;theme&quot;: &quot;cat ./_config.purer.yml &gt; ./themes/purer/_config.yml &quot;, &quot;build&quot;: &quot;npm run theme &amp;&amp; hexo generate&quot;, &quot;clean&quot;: &quot;hexo clean&quot;, &quot;deploy&quot;: &quot;npm run theme &amp;&amp; hexo deploy&quot;, &quot;server&quot;: &quot;npm run theme &amp;&amp; hexo server&quot; &#125;,&#125; 配置主题 安装及配置插件 首先可选的工作是卸载不需要或不推荐的渲染器： 12[skinyi@localhost gh-pages]$ npm uninstall hexo-renderer-stylus[skinyi@localhost gh-pages]$ npm uninstall hexo-renderer-marked 安装 markdown-it 渲染器以及其他常用插件： 12345678# markdown-it 渲染器[skinyi@localhost gh-pages]$ npm i -S hexo-renderer-markdown-it# 支持从post_assert_folder 用 markdown 引入图片[skinyi@localhost gh-pages]$ npm i -S hexo-asset-image# 支持 emoji[skinyi@localhost gh-pages]$ npm i -S markdown-it-emoji# 支持数学公式[skinyi@localhost gh-pages]$ npm i -S @iktakahiro/markdown-it-katex 由于 hexo-renderer-markdown-it 默认不生成 h1 的锚点，所以我们需要在站点配置文件添加如下设置，在插件对象里将刚才添加的两个插件加进去: _config.yml123456789101112131415markdown: html: true xhtmlOut: true breaks: true langPrefix: linkify: true typographer: quotes: “”‘’ anchors: level: 1 permalink: false separator: &#x27;-&#x27; plugins: - &#x27;@iktakahiro/markdown-it-katex&#x27; - markdown-it-emoji 创建常见页面 在 项目主目录/source 下按需添加 categories、tags、repositories、links、about 目录，这些分别对应博客框架中的分类页、标签页、仓库页（主题独有）、友链页、关于页。然后在其中创建对应的 index.md 文件。 我的项目没有要友链页，故最终目录结构如下： 12345678910111213141516171819[skinyi@localhost gh-pages]$ tree -L 2 sourcesource├── about│ └── index.md├── categories│ └── index.md├── images│ ├── avatar.jpg│ └── favicon.png├── _posts│ ├── 使用 Hexo 搭建个人博客.md│ └── images├── README.md├── repository│ └── index.md└── tags └── index.md7 directories, 8 files 如果你事先看过 Hexo 的文档，你就会知道 _post 目录存放的是写好的文章以及我们刚刚创建的 index.md 需要添加 front-matter。以内容稍微多的 about 目录的 front-matter 为例： 1234567---title: 关于description: 个人简介layout: aboutsidebar: customdate: 2022-02-22 20:55:00--- 其他目录的 front-matter 可以参考主题作者文档中的 Demo 链接。 定制主题配置 接下来需要修改项目主目录下的 _config_purer.yml 文件来定制自己的主题，这个参照主题文档按照自己的心意定制就成，我没有要友链和书单页面。 写作 所有已经发表的文章都在项目目录的 source/_posts 子目录下，Hexo 同样支持添加草稿，草稿目录里的文章默认不会渲染出来。对我来说懒得使用草稿了，因为吹牛根本不需要打草稿。我比较喜欢 VSCode 里边写边想，写完后再部署就可以了，根本不需要草稿。 博文是以 markdown 格式编写的，好在这门语言的学习成本并不高，多写多用多记就可以满足大部分使用需要，比较冷门的格式需要用的时候再查也花费不了太长时间。 部署文章 博客网站搭建起来了需要部署到公网上才能被他人看到，但是公网 IP 以及服务器需要花费不小的经济成本，好在一些代码托管网站都提供了 XXX Pages 服务。需要注意的是：在国内的平台上启用 Pages 服务一般都需要进行实名认证，而在 Github Pages 上部署不需要进行实名。 使用 git 的方式进行博客部署可以安装 hexo 插件 hexo-deployer-git： 1[skinyi@localhost gh-pages]$ npm install hexo-deployer-git --save 在 _config.yml 中修改配置： 1234567deploy: type: git repo: github: &lt;github 仓库地址&gt; # 如 https://github.com/xxx/xxx.github.io gitee: &lt;gitee 仓库地址&gt; # 如 https://gitee.com/xxx/xxx branch: [代码分支] # 如 master message: [提交信息] 生成站点文件并推送至远程仓库： 1[skinyi@localhost gh-pages]$ hexo clean &amp;&amp; hexo deploy 通过 Git 方式提交时建议在本地生成公私钥对并将生成的公钥文件添加到远程仓库的公钥列表里，然后每次提交时就可以通过验证公私密钥对的方式而不用每次都输用户名及密码。 到这里基本算是介绍完了所有的搭建步骤，之后我会把我在 Typora 里写的所有学习笔记都搬运到这个博客中，当然这个网站的内容并不局限于一些跟技术相关的东西，我并不确定我写的这些东西会不会有人看，我也打算写一些技术博客以外的东西，不管以后怎么样、写些什么，就活在当下、享受并记录生活吧。","categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"杂项","slug":"学习/杂项","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%82%E9%A1%B9/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"https://skinyi.github.io/tags/Javascript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://skinyi.github.io/tags/Nodejs/"},{"name":"Hexo","slug":"Hexo","permalink":"https://skinyi.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://skinyi.github.io/tags/Markdown/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"Docker","slug":"学习/Docker","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Docker/"},{"name":"日常记录","slug":"日常记录","permalink":"https://skinyi.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"},{"name":"ACP","slug":"学习/ACP","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/ACP/"},{"name":"Office","slug":"学习/Office","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Office/"},{"name":"Linux","slug":"学习/Linux","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/Linux/"},{"name":"迁移文章","slug":"迁移文章","permalink":"https://skinyi.github.io/categories/%E8%BF%81%E7%A7%BB%E6%96%87%E7%AB%A0/"},{"name":"杂项","slug":"学习/杂项","permalink":"https://skinyi.github.io/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%82%E9%A1%B9/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://skinyi.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"https://skinyi.github.io/tags/Linux/"},{"name":"容器","slug":"容器","permalink":"https://skinyi.github.io/tags/%E5%AE%B9%E5%99%A8/"},{"name":"虚拟化","slug":"虚拟化","permalink":"https://skinyi.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"认证考试","slug":"认证考试","permalink":"https://skinyi.github.io/tags/%E8%AE%A4%E8%AF%81%E8%80%83%E8%AF%95/"},{"name":"ACP","slug":"ACP","permalink":"https://skinyi.github.io/tags/ACP/"},{"name":"云计算","slug":"云计算","permalink":"https://skinyi.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"},{"name":"阿里云","slug":"阿里云","permalink":"https://skinyi.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"Excel","slug":"Excel","permalink":"https://skinyi.github.io/tags/Excel/"},{"name":"Office","slug":"Office","permalink":"https://skinyi.github.io/tags/Office/"},{"name":"避免加班","slug":"避免加班","permalink":"https://skinyi.github.io/tags/%E9%81%BF%E5%85%8D%E5%8A%A0%E7%8F%AD/"},{"name":"少加班","slug":"少加班","permalink":"https://skinyi.github.io/tags/%E5%B0%91%E5%8A%A0%E7%8F%AD/"},{"name":"RHEL","slug":"RHEL","permalink":"https://skinyi.github.io/tags/RHEL/"},{"name":"RHCE","slug":"RHCE","permalink":"https://skinyi.github.io/tags/RHCE/"},{"name":"Javascript","slug":"Javascript","permalink":"https://skinyi.github.io/tags/Javascript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"https://skinyi.github.io/tags/Nodejs/"},{"name":"Hexo","slug":"Hexo","permalink":"https://skinyi.github.io/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://skinyi.github.io/tags/Markdown/"}]}